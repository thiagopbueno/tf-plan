////////////////////////////////////////////////////////////////////
// The problem models the active maintenance of water levels in
// a Reservoir system with uncertain rainfall and nonlinear 
// evaporation rates as a function of water level.  The objective
// is to maintain all reservoir levels within a desired safe range.
//
// The state of each reservoir is the water level (rlevel).  The 
// actions are to set the outflows of each reservoir.  Rewards
// are summed per reservoir and optimal when the water level is
// within predefined upper and lower bounds.
//
// Author: Ga Wu, Buser Say inspired by Aswin Raghavan's RDDL model
////////////////////////////////////////////////////////////////////

domain reservoir {

    requirements = { 
        concurrent,           // x and y directions move independently and simultaneously
        reward-deterministic, // this domain does not use a stochastic reward
        intermediate-nodes,   // this domain uses intermediate pvariable nodes
        constrained-state     // this domain uses state constraints
    };

    types {
        res: object;
    };
    
    pvariables {
    
        // Constants
        MAX_RES_CAP(res): { non-fluent, real, default = 100.0 }; // Beyond this amount, water spills over
        UPPER_BOUND(res): { non-fluent, real, default = 80.0 };  // The upper bound for a safe reservoir level
        LOWER_BOUND(res): { non-fluent, real, default = 20.0 };  // The lower bound for a safe reservoir level
        RAIN_SHAPE(res):  { non-fluent, real, default = 25.0 };  // Gamma shape parameter for rainfall
        RAIN_SCALE(res):  { non-fluent, real, default = 25.0 };  // Gamma scale paramater for rainfall
        DOWNSTREAM(res,res): { non-fluent, bool, default = false }; // Indicates 2nd res is downstream of 1st res
        SINK_RES(res):    { non-fluent, bool, default = false }; // This is a "sink" water source (sea, ocean) 
        MAX_WATER_EVAP_FRAC_PER_TIME_UNIT: { non-fluent, real, default = 0.05 }; // Maximum fraction of evaporation

        LOW_PENALTY(res) : { non-fluent, real, default =  -5.0 }; // Penalty per unit of level < LOWER_BOUND
        HIGH_PENALTY(res): { non-fluent, real, default = -10.0 }; // Penalty per unit of level > UPPER_BOUND

        // Intermediate fluents
        evaporated(res): {interm-fluent, real, level=1}; // How much evaporates from res in this time step?
        rainfall(res):   {interm-fluent, real, level=1}; // How much rainfall is there in this time step?
        overflow(res):   {interm-fluent, real, level=1}; // Is there any excess overflow (over the rim)?
        inflow(res):     {interm-fluent, real, level=2}; // How much res receives from upstream reservoirs?

        // State fluents
        rlevel(res): {state-fluent, real, default = 50.0 }; // Reservoir level for res
        
        // Action fluents
        outflow(res): { action-fluent, real, default = 0.0 }; // Action to set outflow of res
    };
    
    cpfs {
        // Gamma is non-negative, Gamma expected value is SHAPE*SCALE, variance is SHAPE*SCALE^2
        rainfall(?r) = Gamma(RAIN_SHAPE(?r), RAIN_SCALE(?r));
        
        evaporated(?r) = MAX_WATER_EVAP_FRAC_PER_TIME_UNIT
                         *[(rlevel(?r)*rlevel(?r))/(MAX_RES_CAP(?r)*MAX_RES_CAP(?r))]
                         *rlevel(?r);

        // Consider MAX_RES_CAP=90, rlevel=100, outflow=4, then the excess overflow is 6 units
        // Consider MAX_RES_CAP=100, rlevel=90, outflow=4, then the excess overflow is 0 units
        overflow(?r) = max[0, rlevel(?r) - outflow(?r) - MAX_RES_CAP(?r)]; 

        inflow(?r) = sum_{?up : res} [DOWNSTREAM(?up,?r)*(outflow(?up) + overflow(?up))];

        rlevel'(?r) = max[0.0, rlevel(?r) + rainfall(?r) - evaporated(?r) - outflow(?r) - overflow(?r) + inflow(?r)];
    };
    
    reward = sum_{?r: res} [if (rlevel'(?r)>=LOWER_BOUND(?r) ^ (rlevel'(?r)<=UPPER_BOUND(?r)))
                                    then 0
                                    else if (rlevel'(?r)<=LOWER_BOUND(?r))
                                        then LOW_PENALTY(?r)*(LOWER_BOUND(?r)-rlevel'(?r))
                                        else HIGH_PENALTY(?r)*(rlevel'(?r)-UPPER_BOUND(?r))];
                                
    action-preconditions {
    
        forall_{?r : res} outflow(?r) <= rlevel(?r); 
        forall_{?r : res} outflow(?r) >= 0;
        
    };

    state-invariants {

        forall_{?r : res} rlevel(?r) >= 0;  
        forall_{?up : res} (sum_{?down : res} DOWNSTREAM(?up,?down)) <= 1;
    };
}

non-fluents res10 {
    domain = reservoir;
    objects{
        res: {t1,t2,t3,t4,t5,t6,t7,t8,t9,t10};
    };
    non-fluents {
        RAIN_SHAPE(t1) = 2.763;
        RAIN_SCALE(t1) = 5.281;
        RAIN_SHAPE(t2) = 1.751;
        RAIN_SCALE(t2) = 5.183;
        RAIN_SHAPE(t3) = 2.091;
        RAIN_SCALE(t3) = 2.207;
        RAIN_SHAPE(t4) = 1.094;
        RAIN_SCALE(t4) = 6.870;
        RAIN_SHAPE(t5) = 2.361;
        RAIN_SCALE(t5) = 2.825;
        RAIN_SHAPE(t6) = 1.426;
        RAIN_SCALE(t6) = 9.122;
        RAIN_SHAPE(t7) = 1.897;
        RAIN_SCALE(t7) = 7.631;
        RAIN_SHAPE(t8) = 2.331;
        RAIN_SCALE(t8) = 9.474;
        RAIN_SHAPE(t9) = 2.791;
        RAIN_SCALE(t9) = 3.741;
        RAIN_SHAPE(t10) = 2.188;
        RAIN_SCALE(t10) = 9.322;
        MAX_RES_CAP(t1) = 723.359;
        UPPER_BOUND(t1) = 568.608;
        LOWER_BOUND(t1) = 74.798;
        MAX_RES_CAP(t2) = 633.308;
        UPPER_BOUND(t2) = 482.407;
        LOWER_BOUND(t2) = 65.069;
        MAX_RES_CAP(t3) = 790.208;
        UPPER_BOUND(t3) = 628.340;
        LOWER_BOUND(t3) = 84.686;
        MAX_RES_CAP(t4) = 673.108;
        UPPER_BOUND(t4) = 523.578;
        LOWER_BOUND(t4) = 77.567;
        MAX_RES_CAP(t5) = 965.364;
        UPPER_BOUND(t5) = 763.254;
        LOWER_BOUND(t5) = 98.434;
        MAX_RES_CAP(t6) = 712.264;
        UPPER_BOUND(t6) = 570.892;
        LOWER_BOUND(t6) = 80.586;
        MAX_RES_CAP(t7) = 979.833;
        UPPER_BOUND(t7) = 737.203;
        LOWER_BOUND(t7) = 129.610;
        MAX_RES_CAP(t8) = 723.520;
        UPPER_BOUND(t8) = 597.008;
        LOWER_BOUND(t8) = 96.370;
        MAX_RES_CAP(t9) = 997.650;
        UPPER_BOUND(t9) = 800.118;
        LOWER_BOUND(t9) = 103.015;
        MAX_RES_CAP(t10) = 627.932;
        UPPER_BOUND(t10) = 511.543;
        LOWER_BOUND(t10) = 75.233;
        DOWNSTREAM(t1,t2);
        DOWNSTREAM(t2,t3);
        DOWNSTREAM(t3,t4);
        DOWNSTREAM(t4,t5);
        DOWNSTREAM(t5,t6);
        DOWNSTREAM(t6,t7);
        DOWNSTREAM(t7,t8);
        DOWNSTREAM(t8,t9);
        DOWNSTREAM(t9,t10);
        SINK_RES(t10);        
    };
}

instance inst_reservoir_res10 {
    domain = reservoir;
    non-fluents = res10;
    init-state{
        rlevel(t1) = 75.0;
    };
    max-nondef-actions = pos-inf;
    horizon = 40;
    discount = 1.0;
}