//Room Temperature Control Simulation
//Here we define space as object, which includes rooms, hallways, and outside of the building.
//Our objective is to save the cost of using HVAC system, while controlling the room temperature within a certain desired range.
//We use HVAC system to control the temperature of each room, by turning the HVAC (heating) air on/off
//Reward function is to calculate the cost to providing cooling/warming control.
//There will also be thermal transfer both between each space, which will impact the room temperature
//The amount of heat transferred depends on the temperature difference and the Thermal Resistance of the wall between the spaces
//We assigns a penalty that will be applied if the room temperature goes beyond the desired temperature range

domain hvac_vav_fix{
      types {
          space : object;
    };

    pvariables {
        //Constants
        ADJ(space, space)    : { non-fluent, bool, default = false };   //Indicate if two rooms are adjacent to each other
        ADJ_OUTSIDE(space)      : { non-fluent, bool, default = false };    //Indicate if the room is adjacent to the outside
        ADJ_HALL(space)         : { non-fluent, bool, default = false };    //Indicate if the room is adjacent to the hallway
        R_OUTSIDE(space)        : { non-fluent, real, default = 4};     //Thermal Resistance of the wall between the room and the outside; used to calculate the heat transfered out
        R_HALL(space)           : { non-fluent, real, default = 2};     //Thermal Resistance of the wall between the room and the hallway; used to calculate the heat transfered out    
        R_WALL(space, space) : { non-fluent, real, default = 1.5 }; //Thermal Resistance of the wall between two rooms
        IS_ROOM(space)       : { non-fluent, bool, default = false };   //Indicate if the space is a room; otherwise it could be a hallway or outside
        CAP(space)           : { non-fluent, real, default = 80 }; //Heat Capacity of the room
        CAP_AIR              : { non-fluent, real, default = 1.006 }; //Heat Capacity of the air; unit of kj/(kg*C)
        COST_AIR             : { non-fluent, real, default = 1 };   //Cost of heated air from HVAC; unit of $/kg
        TIME_DELTA           : { non-fluent, real, default = 1 }; //Delta time used to find change in temperatureï¼›unit of min
        TEMP_AIR             : { non-fluent, real, default = 40 }; //Set a fixed temperature for HVAC air
        TEMP_UP(space)       : { non-fluent, real, default = 23.5 }; //Set an upper bound for the desired temperature range
        TEMP_LOW(space)      : { non-fluent, real, default = 20.0 }; //Set a lower bound for the desired temperature range
        PENALTY              : { non-fluent, real, default = 20000 }; //A penalty applied when the room temperature goes beyond the desired range
        AIR_MAX(space)       : { non-fluent, real, default = 10.0 }; //The Maximum amount of air entering the room per min, if the HVAC is Variable Air Volume
        
        TEMP_OUTSIDE_MEAN(space) : { non-fluent, real, default = 6.0 };
        TEMP_OUTSIDE_VARIANCE(space) : { non-fluent, real, default = 1.0 };

        TEMP_HALL_MEAN(space) : { non-fluent, real, default = 10.0 };
        TEMP_HALL_VARIANCE(space) : { non-fluent, real, default = 3.0 };

        // Intermediate Variables
        temp_outside(space)     : { interm-fluent, real, level = 1 }; //Set the temperature of the outside; used to calculate the temperature difference, and then the amount of heat tranfer
        temp_hall(space)        : { interm-fluent, real, level = 1 }; //Set the temperature of the hallway; used to calculate the temperature difference, and then the amount of heat tranfer

        //State Variable
        temp(space)          : { state-fluent, real, default = 10.0 };  //Temperature of the space
        
        //Action
        air(space)           : { action-fluent, real, default = 0.0 }; //The amount (kg/min) of air entering from HVAC System - Variable Air Volume System
    };

    cpfs {
        // Interms
        temp_outside(?s) = Normal(TEMP_OUTSIDE_MEAN(?s), TEMP_OUTSIDE_VARIANCE(?s));
        temp_hall(?s) = Normal(TEMP_HALL_MEAN(?s), TEMP_HALL_VARIANCE(?s));

        //State
        temp'(?s) = temp(?s) + TIME_DELTA/CAP(?s) * 
             (air(?s) * CAP_AIR * (TEMP_AIR - temp(?s)) * IS_ROOM(?s) 
            + sum_{?p : space} ((ADJ(?s, ?p) | ADJ(?p, ?s)) * (temp(?p) - temp(?s)) / R_WALL(?s, ?p))
            + ADJ_OUTSIDE(?s)*(temp_outside(?s) - temp(?s))/ R_OUTSIDE(?s) 
            + ADJ_HALL(?s)*(temp_hall(?s)-temp(?s))/R_HALL(?s));
        };
        

    reward = - (sum_{?s : space} IS_ROOM(?s)*(air(?s) * COST_AIR
                + ((temp(?s) < TEMP_LOW(?s)) | (temp(?s) > TEMP_UP(?s))) * PENALTY) + 10.0*abs[((TEMP_UP(?s) + TEMP_LOW(?s))/2.0) - temp(?s)]);

    action-preconditions{
            forall_{?s : space} [ air(?s) >= 0 ];
            forall_{?s : space} [ air(?s) <= AIR_MAX(?s)];
        };
}


non-fluents nf_hvac_vav_fix_3rooms {
    domain = hvac_vav_fix;

    objects{
        space : { r1, r2, r3 }; //Three rooms, one hallway, and the outside world
    };

    non-fluents {
        //Define rooms
        IS_ROOM(r1) = true;
        IS_ROOM(r2) = true;
        IS_ROOM(r3) = true;
        
        //Define the adjacency
        ADJ(r1, r2) = true;
        ADJ(r1, r3) = true;
        ADJ(r2, r3) = true;
        
        ADJ_OUTSIDE(r1) = true;
        ADJ_OUTSIDE(r2) = true;
        ADJ_HALL(r1) = true;
        ADJ_HALL(r3) = true;
    };
}

instance inst_hvac_vav_fix_3rooms {
    domain = hvac_vav_fix;
    non-fluents = nf_hvac_vav_fix_3rooms;
    init-state{
        temp(r1) = 10.0;
    };
    horizon = 40;
    discount = 0.9;
}
